// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EngineersAppWebCore.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EngineersAppWebCore.Data
{
    public partial class Claimsitev2fnolContext
    {
        private Claimsitev2fnolContextProcedures _procedures;

        public virtual Claimsitev2fnolContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Claimsitev2fnolContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public Claimsitev2fnolContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SP_GetAllJobsForAEngineerResult>().HasNoKey().ToView(null);
        }
    }

    public interface IClaimsitev2fnolContextProceduresContract
    {
        Task<List<SP_GetAllJobsForAEngineerResult>> SP_GetAllJobsForAEngineerAsync(Guid? EngineerId, Guid? WIP_Product, Guid? WIP_Service, Guid? Authorization_Required, CancellationToken cancellationToken = default);
    }

    public partial class Claimsitev2fnolContextProcedures
    {
        private readonly Claimsitev2fnolContext _context;

        public Claimsitev2fnolContextProcedures(Claimsitev2fnolContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SP_GetAllJobsForAEngineerResult>> SP_GetAllJobsForAEngineerAsync(Guid? EngineerId, Guid? WIP_Product, Guid? WIP_Service, Guid? Authorization_Required, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EngineerId",
                    Value = EngineerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "WIP_Product",
                    Value = WIP_Product ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "WIP_Service",
                    Value = WIP_Service ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Authorization_Required",
                    Value = Authorization_Required ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GetAllJobsForAEngineerResult>("EXEC @returnValue = [dbo].[SP_GetAllJobsForAEngineer] @EngineerId, @WIP_Product, @WIP_Service, @Authorization_Required", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
