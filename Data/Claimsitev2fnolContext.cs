// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using EngineersAppWebCore.Models;

namespace EngineersAppWebCore.Data
{
    public partial class Claimsitev2fnolContext : DbContext
    {
        public Claimsitev2fnolContext()
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(Connection.connectionstring);
        }


        public Claimsitev2fnolContext(DbContextOptions<Claimsitev2fnolContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Claim> Claims { get; set; }
        public virtual DbSet<ClaimHistory> ClaimHistories { get; set; }
        public virtual DbSet<ClaimType> ClaimTypes { get; set; }
        public virtual DbSet<Engineer> Engineers { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<SiteSurveyImage> SiteSurveyImages { get; set; }
        public virtual DbSet<SiteSurveyNew> SiteSurveyNews { get; set; }
        public virtual DbSet<SiteSurveyPhoto> SiteSurveyPhotos { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Claim>(entity =>
            {
                entity.ToTable("Claim");

                entity.HasIndex(e => e.AllocatedEngineerId)
                    .HasName("IX_AllocatedEngineerId");

                entity.HasIndex(e => e.ClaimRef);

                entity.HasIndex(e => e.ClaimSource);

                entity.HasIndex(e => e.ClaimTypeId)
                    .HasName("IX_ClaimTypeId");

                entity.HasIndex(e => e.ClientId)
                    .HasName("IX_ClientID");

                entity.HasIndex(e => e.JobId);

                entity.HasIndex(e => e.LeadId);

                entity.HasIndex(e => e.ProductId)
                    .HasName("IX_ProductID");

                entity.HasIndex(e => e.StatusId)
                    .HasName("IX_StatusID");

                entity.HasIndex(e => e.TypeId)
                    .HasName("IX_TypeID");

                entity.HasIndex(e => new { e.RiskPostcode, e.ClaimRef })
                    .HasName("ClaimSearch");

                entity.HasIndex(e => new { e.ProductId, e.StatusId, e.StatusChangedDate })
                    .HasName("IX_Claim_StatusID_StatusChangedDate");

                entity.HasIndex(e => new { e.AllocatedEngineerId, e.ProductId, e.StatusId, e.CreatedOn })
                    .HasName("IX_Claim_ProductID_StatusID_CreatedOn");

                entity.HasIndex(e => new { e.AuthStatus, e.ProductId, e.StatusId, e.AuthPriority })
                    .HasName("IX_Claim_ProductID_StatusID_AuthPriority");

                entity.HasIndex(e => new { e.ProductId, e.AllocatedEngineerId, e.StatusId, e.CreatedOn })
                    .HasName("IX_Claim_StatusID_CreatedOn");

                entity.HasIndex(e => new { e.ProductId, e.AuthStatus, e.StatusId, e.AuthPriority })
                    .HasName("IX_Claim_StatusID_AuthPriority");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Age)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AgreedFee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AllocatedEngineerTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AppointmentBookedDate).HasMaxLength(200);

                entity.Property(e => e.AppointmentBookedTime).HasMaxLength(200);

                entity.Property(e => e.AuthAmountCollected).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthBanding).HasMaxLength(5);

                entity.Property(e => e.AuthLastSaveDate).HasColumnType("datetime");

                entity.Property(e => e.AuthMage).HasColumnName("AuthMAge");

                entity.Property(e => e.AuthMberlimit)
                    .HasColumnName("AuthMBERLimit")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMboilerValue)
                    .HasColumnName("AuthMBoilerValue")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMmake)
                    .HasColumnName("AuthMMake")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthMmarketValue)
                    .HasColumnName("AuthMMarketValue")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMmodel)
                    .HasColumnName("AuthMModel")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthMreason).HasColumnName("AuthMReason");

                entity.Property(e => e.AuthPriority).HasMaxLength(250);

                entity.Property(e => e.AuthStatus).HasMaxLength(250);

                entity.Property(e => e.BoilerServiceDocument).HasMaxLength(50);

                entity.Property(e => e.BoilerServiceDocument1).HasMaxLength(350);

                entity.Property(e => e.CancelCounterByCustomer).HasDefaultValueSql("((0))");

                entity.Property(e => e.CancelCounterByHo)
                    .HasColumnName("CancelCounterByHO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClaimGivenHour).HasMaxLength(50);

                entity.Property(e => e.ClaimGivenMin).HasMaxLength(50);

                entity.Property(e => e.ClaimRef).HasMaxLength(200);

                entity.Property(e => e.ClaimSource).HasDefaultValueSql("((1))");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.Covidsms).HasColumnName("COVIDSMS");

                entity.Property(e => e.DeclineTypeId).HasColumnName("DeclineTypeID");

                entity.Property(e => e.DialledTodayDate).HasColumnType("datetime");

                entity.Property(e => e.EndServiceDate).HasColumnType("datetime");

                entity.Property(e => e.EngineerAllocatedDate).HasColumnType("datetime");

                entity.Property(e => e.EngineerAllocatedForDate).HasColumnType("datetime");

                entity.Property(e => e.ExcessAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.FirstTimeEta)
                    .HasColumnName("FirstTimeETA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fnolcomplete).HasColumnName("FNOLcomplete");

                entity.Property(e => e.FnolcompleteDate)
                    .HasColumnName("FNOLcompleteDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.GoesIntoAuthDate).HasColumnType("datetime");

                entity.Property(e => e.HandlingFee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.IncompleteTypeId).HasColumnName("IncompleteTypeID");

                entity.Property(e => e.InhibitorDate).HasColumnType("datetime");

                entity.Property(e => e.InhibitorDialledTodayDate).HasColumnType("datetime");

                entity.Property(e => e.InhibitorSentSmsToday).HasColumnType("datetime");

                entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoiceApproved).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoiceApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreated).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceProcessed).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoiceProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.IsBoilerAccessible).HasMaxLength(100);

                entity.Property(e => e.IsBoilerWorking).HasMaxLength(100);

                entity.Property(e => e.IsFca).HasColumnName("IsFCA");

                entity.Property(e => e.JobCompleteDate).HasColumnType("datetime");

                entity.Property(e => e.JobId)
                    .HasColumnName("JobID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Labour)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LastEta)
                    .HasColumnName("LastETA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lat).HasMaxLength(50);

                entity.Property(e => e.LeadId).HasColumnName("LeadID");

                entity.Property(e => e.Lng).HasMaxLength(50);

                entity.Property(e => e.Make)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Model)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.OnRouteDate).HasColumnType("datetime");

                entity.Property(e => e.Oneoffrepair).HasColumnName("oneoffrepair");

                entity.Property(e => e.Parts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyDocument).HasMaxLength(100);

                entity.Property(e => e.PreviousStatusId).HasColumnName("PreviousStatusID");

                entity.Property(e => e.Priority).HasMaxLength(200);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.RateNote).IsUnicode(false);

                entity.Property(e => e.Rating).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemedialWorkRecomendations)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RiskAddress).HasMaxLength(500);

                entity.Property(e => e.RiskPostcode).HasMaxLength(500);

                entity.Property(e => e.SendRemedialDate).HasColumnType("datetime");

                entity.Property(e => e.ServiceDelayDate).HasColumnType("datetime");

                entity.Property(e => e.Smssent).HasColumnName("SMSSent");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.Tcdocument)
                    .HasColumnName("TCDocument")
                    .HasMaxLength(100);

                entity.Property(e => e.TempServiceDueDate).HasColumnType("datetime");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Town)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.UnderwritingExcessAmount).HasColumnName("Underwriting_ExcessAmount");

                entity.Property(e => e.UnderwritingExtra)
                    .HasColumnName("Underwriting_Extra")
                    .HasMaxLength(50);

                entity.Property(e => e.UnderwritingOutCome)
                    .HasColumnName("Underwriting_OutCome")
                    .HasMaxLength(200);

                entity.Property(e => e.UnderwritingPaymentToBeCollected).HasColumnName("Underwriting_PaymentToBeCollected");

                entity.Property(e => e.UnderwritingPaymentType)
                    .HasColumnName("Underwriting_PaymentType")
                    .HasMaxLength(50);

                entity.Property(e => e.UnderwritingPoint).HasColumnName("Underwriting_Point");

                entity.Property(e => e.Web1stPolicyLiveDate).HasMaxLength(150);

                entity.Property(e => e.WebExcessAmount).HasMaxLength(200);

                entity.Property(e => e.WebInceptionDate).HasMaxLength(200);

                entity.Property(e => e.WebInvoices).HasMaxLength(200);

                entity.Property(e => e.WebLossRatio).HasMaxLength(200);

                entity.Property(e => e.WebServiceDate).HasMaxLength(200);

                entity.Property(e => e.WebStatus).HasMaxLength(200);

                entity.Property(e => e.WebTeam).HasMaxLength(200);

                entity.Property(e => e.WebTotalAmount).HasMaxLength(200);

                entity.Property(e => e.WhereIsBoilerLocated).HasMaxLength(100);

                entity.HasOne(d => d.AllocatedEngineer)
                    .WithMany(p => p.Claims)
                    .HasForeignKey(d => d.AllocatedEngineerId)
                    .HasConstraintName("FK_Claim_Engineer");

                entity.HasOne(d => d.ClaimType)
                    .WithMany(p => p.Claims)
                    .HasForeignKey(d => d.ClaimTypeId)
                    .HasConstraintName("FK_Claim_ClaimType");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Claims)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Product");
            });

            modelBuilder.Entity<ClaimHistory>(entity =>
            {
                entity.ToTable("ClaimHistory");

                entity.HasIndex(e => e.ClaimId)
                    .HasName("NonClusteredIndex-20190929-234231");

                entity.HasIndex(e => e.CreatedOn)
                    .HasName("NonClusteredIndex-20191014-110718");

                entity.HasIndex(e => e.JobsId)
                    .HasName("NonClusteredIndex-20190929-234241");

                entity.HasIndex(e => e.Title)
                    .HasName("NonClusteredIndex-20191014-110726");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ImagePath).HasMaxLength(500);

                entity.Property(e => e.Latitude).HasMaxLength(250);

                entity.Property(e => e.Longitude).HasMaxLength(250);

                entity.Property(e => e.Title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.ClaimHistories)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ClaimHistory_Claim");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ClaimHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimHistory_User");

                entity.HasOne(d => d.Jobs)
                    .WithMany(p => p.ClaimHistories)
                    .HasForeignKey(d => d.JobsId)
                    .HasConstraintName("FK_ClaimHistory_Jobs");
            });

            modelBuilder.Entity<ClaimType>(entity =>
            {
                entity.ToTable("ClaimType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Engineer>(entity =>
            {
                entity.ToTable("Engineer");

                entity.HasIndex(e => e.CarId)
                    .HasName("IX_CarId");

                entity.HasIndex(e => e.EngStatusId)
                    .HasName("IX_EngStatusId");

                entity.HasIndex(e => e.GroupId)
                    .HasName("IX_GroupId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("IX_TypeId");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.HasIndex(e => new { e.FirstName, e.SurName })
                    .HasName("NonClusteredIndex-20190910-230424");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Abbr)
                    .HasColumnName("ABBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Address3)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.AppointmentColour).HasMaxLength(250);

                entity.Property(e => e.CarAssignDateTime).HasColumnType("datetime");

                entity.Property(e => e.CompanyAddress)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyLogo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Cvpath)
                    .HasColumnName("CVPath")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Email2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EngCertName).HasMaxLength(500);

                entity.Property(e => e.Epostcode)
                    .HasColumnName("EPostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GasEngineerNumberEp)
                    .HasColumnName("GasEngineerNumberEP")
                    .HasMaxLength(250);

                entity.Property(e => e.GasSafeExpiry).HasColumnType("datetime");

                entity.Property(e => e.GasSafeLicenseNumber).HasMaxLength(255);

                entity.Property(e => e.GasSafeNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Home)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HomeAddress)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.IbnnumberEp)
                    .HasColumnName("IBNNumberEP")
                    .HasMaxLength(250);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsVatRegistered).HasDefaultValueSql("((0))");

                entity.Property(e => e.LandLine)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lat).HasMaxLength(50);

                entity.Property(e => e.Lng).HasMaxLength(50);

                entity.Property(e => e.Logo).HasMaxLength(50);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MobileAppVersion).HasMaxLength(50);

                entity.Property(e => e.MobileNameEp)
                    .HasColumnName("MobileNameEP")
                    .HasMaxLength(250);

                entity.Property(e => e.MobileUserName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Office)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Other)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Payrate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PersonalAddressEp)
                    .HasColumnName("PersonalAddressEP")
                    .HasMaxLength(250);

                entity.Property(e => e.PersonalEmailEp)
                    .HasColumnName("PersonalEmailEP")
                    .HasMaxLength(150);

                entity.Property(e => e.PersonalPhoneEp)
                    .HasColumnName("PersonalPhoneEP")
                    .HasMaxLength(100);

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrefferredForService).HasDefaultValueSql("((0))");

                entity.Property(e => e.PublicLiabilityDocumentInsurance).IsUnicode(false);

                entity.Property(e => e.PublicLiabilityDocumentInsuranceExpiry).HasColumnType("datetime");

                entity.Property(e => e.Rating).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SelfAssignEngineer).HasDefaultValueSql("((0))");

                entity.Property(e => e.SimProvider).HasMaxLength(200);

                entity.Property(e => e.StartDateEp)
                    .HasColumnName("StartDateEP")
                    .HasColumnType("datetime");

                entity.Property(e => e.SurName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TrackerImei)
                    .HasColumnName("TrackerIMEI")
                    .HasMaxLength(200);

                entity.Property(e => e.TrackerSimNumber).HasMaxLength(200);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.VanReStockDay).HasMaxLength(50);

                entity.Property(e => e.VanSize).HasMaxLength(50);

                entity.Property(e => e.VanStockBid).HasColumnName("VanStockBId");

                entity.Property(e => e.VanStockDate).HasColumnType("datetime");

                entity.Property(e => e.VatNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Work24Hr).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkEmailEp)
                    .HasColumnName("WorkEmailEP")
                    .HasMaxLength(150);

                entity.Property(e => e.WorkOnFriday)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOnMonday)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOnThursday)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOnTuesday)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkOnWednesday)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkPhoneEp)
                    .HasColumnName("WorkPhoneEP")
                    .HasMaxLength(100);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Engineers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Engineer_User");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasIndex(e => e.AuthMreason)
                    .HasName("IX_AuthMReason");

                entity.HasIndex(e => e.EngineerClusterAppointmentId);

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Id");

                entity.HasIndex(e => new { e.ClaimId, e.JobId })
                    .HasName("jobs1");

                entity.HasIndex(e => new { e.EngineerId, e.EngineerClusterAppointmentId });

                entity.HasIndex(e => new { e.ClaimId, e.EngineerId, e.JobId, e.EngineerAllocatedForDate })
                    .HasName("IX_Jobs_EngineerAllocatedForDate");

                entity.HasIndex(e => new { e.ClaimId, e.JobId, e.EngineerId, e.EngineerAllocatedForDate })
                    .HasName("IX_Jobs_EngineerId_EngineerAllocatedForDate");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Age)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Agreedamount)
                    .HasColumnName("AGREEDAMOUNT")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Agreedamountdescription)
                    .HasColumnName("AGREEDAMOUNTDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.AllocatedEngineerTime)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AppointmentEndTime)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AppointmentTime)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ApproxArrTime).HasMaxLength(500);

                entity.Property(e => e.ArrivedAtJob).HasColumnType("datetime");

                entity.Property(e => e.ArrivedAtJobDatetime).HasColumnType("datetime");

                entity.Property(e => e.Auth1stHour).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthAdditionalHour).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthBerlimitTotalCntrbtnFormula)
                    .HasColumnName("AuthBERLimit_TotalCntrbtn_Formula")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthCntrbtnToCollectFormula)
                    .HasColumnName("AuthCntrbtnToCollect_Formula")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthCostOfLabour).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthGivenDateTime).HasColumnType("datetime");

                entity.Property(e => e.AuthGivenHour).HasMaxLength(50);

                entity.Property(e => e.AuthGivenMin).HasMaxLength(50);

                entity.Property(e => e.AuthMage).HasColumnName("AuthMAge");

                entity.Property(e => e.AuthMberlimit)
                    .HasColumnName("AuthMBERLimit")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMboilerValue)
                    .HasColumnName("AuthMBoilerValue")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMmake)
                    .HasColumnName("AuthMMake")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthMmarketValue)
                    .HasColumnName("AuthMMarketValue")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMmodel)
                    .HasColumnName("AuthMModel")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthMreason).HasColumnName("AuthMReason");

                entity.Property(e => e.AuthTotalCntrbtnFormula)
                    .HasColumnName("AuthTotalCntrbtn_Formula")
                    .HasMaxLength(250);

                entity.Property(e => e.AuthTotalCntrbtnPartsCostFormula)
                    .HasColumnName("AuthTotalCntrbtn_PartsCost_Formula")
                    .HasMaxLength(250);

                entity.Property(e => e.BookingAddress).IsUnicode(false);

                entity.Property(e => e.BookingDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CertificateDate).HasColumnType("datetime");

                entity.Property(e => e.CertificateName).HasMaxLength(500);

                entity.Property(e => e.Cofitted)
                    .HasColumnName("COFitted")
                    .HasMaxLength(50);

                entity.Property(e => e.Cotested)
                    .HasColumnName("COTested")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Distance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DistanceBetweenJobs).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Econ)
                    .HasColumnName("ECon")
                    .HasMaxLength(255);

                entity.Property(e => e.EndServiceDate).HasColumnType("datetime");

                entity.Property(e => e.EngineerAgreedamount)
                    .HasColumnName("EngineerAGREEDAMOUNT")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerAgreedamountdescription)
                    .HasColumnName("EngineerAGREEDAMOUNTDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.EngineerAllocatedForDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EngineerEstimatesfnol)
                    .HasColumnName("EngineerESTIMATESFNOL")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerEstimatesfnoldescription)
                    .HasColumnName("EngineerESTIMATESFNOLDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.EngineerGrandtotal)
                    .HasColumnName("EngineerGRANDTOTAL")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerGross).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerJobCompleteDate).HasColumnType("datetime");

                entity.Property(e => e.EngineerLabour)
                    .HasColumnName("EngineerLABOUR")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerLabourdescription)
                    .HasColumnName("EngineerLABOURDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.EngineerNet).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerOther)
                    .HasColumnName("EngineerOTHER")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerOtherdescription)
                    .HasColumnName("EngineerOTHERDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.EngineerParts)
                    .HasColumnName("EngineerPARTS")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EngineerPartsfnoldescription)
                    .HasColumnName("EngineerPARTSFNOLDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.EngineerVat).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EquiBond).HasMaxLength(255);

                entity.Property(e => e.Estimatesfnol)
                    .HasColumnName("ESTIMATESFNOL")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Estimatesfnoldescription)
                    .HasColumnName("ESTIMATESFNOLDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Filepath).HasColumnName("FILEPATH");

                entity.Property(e => e.FkJsid).HasColumnName("FkJSId");

                entity.Property(e => e.FlueChkDt).HasColumnType("datetime");

                entity.Property(e => e.Grandtotal)
                    .HasColumnName("GRANDTOTAL")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoiceApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.JobCompleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobStatus).HasMaxLength(200);

                entity.Property(e => e.JobType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Labour)
                    .HasColumnName("LABOUR")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Labourdescription)
                    .HasColumnName("LABOURDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewActualArrTime).HasMaxLength(150);

                entity.Property(e => e.NewDistance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewDistanceBetweenJobs).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewEstimatedArrTime).HasMaxLength(150);

                entity.Property(e => e.NewTimeBetweenJobs).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NextDueDt).HasColumnType("datetime");

                entity.Property(e => e.Ogins)
                    .HasColumnName("OGIns")
                    .HasMaxLength(255);

                entity.Property(e => e.Ogsup)
                    .HasColumnName("OGSup")
                    .HasMaxLength(255);

                entity.Property(e => e.Ogtight)
                    .HasColumnName("OGTight")
                    .HasMaxLength(255);

                entity.Property(e => e.OnRoute).HasColumnType("datetime");

                entity.Property(e => e.Other)
                    .HasColumnName("OTHER")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Otherdescription)
                    .HasColumnName("OTHERDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Parts)
                    .HasColumnName("PARTS")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PartsConfirmedOn).HasColumnType("datetime");

                entity.Property(e => e.Partsfnoldescription)
                    .HasColumnName("PARTSFNOLDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Points).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ratenote).HasColumnName("RATENOTE");

                entity.Property(e => e.Rating)
                    .HasColumnName("RATING")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RiskContactName).HasMaxLength(250);

                entity.Property(e => e.RiskContactNo1).HasMaxLength(250);

                entity.Property(e => e.RiskContactNo2).HasMaxLength(250);

                entity.Property(e => e.ShowJobsOnEapp).HasColumnName("ShowJobsOnEApp");

                entity.Property(e => e.SigRec).HasMaxLength(255);

                entity.Property(e => e.TimeBetweenJobs).HasMaxLength(500);

                entity.Property(e => e.TimeType).HasMaxLength(50);

                entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Jobs_Claim");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.HasIndex(e => e.FkProductTypeId)
                    .HasName("IX_FkProductTypeId");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Auth1stHour).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthAdditionalHours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthMissedDiagnosis).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Crm247productId).HasColumnName("CRM247ProductID");

                entity.Property(e => e.DoNotSmsnextDay).HasColumnName("DoNotSMSNextDay");

                entity.Property(e => e.HourlyRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IconUpload).HasMaxLength(255);

                entity.Property(e => e.InvoiceNumberAbrv)
                    .HasColumnName("InvoiceNumberABRV")
                    .HasMaxLength(50);

                entity.Property(e => e.IsCp12claim).HasColumnName("IsCP12Claim");

                entity.Property(e => e.IsHeclaim).HasColumnName("IsHEClaim");

                entity.Property(e => e.IsServiceClaim).HasColumnName("isServiceClaim");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NominalCode).HasColumnName("Nominal_Code");

                entity.Property(e => e.Numberid)
                    .HasColumnName("numberid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.OnDemandEta).HasColumnName("OnDemand_ETA");
            });

            modelBuilder.Entity<SiteSurveyImage>(entity =>
            {
                entity.HasKey(e => e.ImgId);

                entity.HasIndex(e => e.Ssid)
                    .HasName("IX_SSId");

                entity.Property(e => e.ImgId).ValueGeneratedNever();

                entity.Property(e => e.ImageName).HasMaxLength(255);

                entity.Property(e => e.Ssid).HasColumnName("SSId");
            });

            modelBuilder.Entity<SiteSurveyNew>(entity =>
            {
                entity.ToTable("SiteSurveyNew");

                entity.HasIndex(e => e.ClaimId)
                    .HasName("IX_ClaimId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AnyAsbestos).HasMaxLength(50);

                entity.Property(e => e.BoilerLocation).HasMaxLength(200);

                entity.Property(e => e.BoilerMake).HasMaxLength(200);

                entity.Property(e => e.BoilerModel).HasMaxLength(200);

                entity.Property(e => e.BoilerType).HasMaxLength(200);

                entity.Property(e => e.BrequireFuseSpur)
                    .HasColumnName("BRequireFuseSpur")
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingWorkAfterRemoval).HasMaxLength(250);

                entity.Property(e => e.ChkRadiatorValves).HasMaxLength(255);

                entity.Property(e => e.ConversionType).HasMaxLength(250);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerPrintName).HasMaxLength(150);

                entity.Property(e => e.CustomerSignatureImageName).HasMaxLength(500);

                entity.Property(e => e.CylinderRemoved).HasMaxLength(50);

                entity.Property(e => e.CylinderRequired).HasMaxLength(150);

                entity.Property(e => e.DegreeElbow45).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DegreeElbow90).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DrainOffPoint).HasMaxLength(50);

                entity.Property(e => e.EarthLoopTest).HasMaxLength(100);

                entity.Property(e => e.ElectricBoardLocation).HasMaxLength(250);

                entity.Property(e => e.EquipotentialBondingGas).HasMaxLength(100);

                entity.Property(e => e.ExistingGasBeUsed).HasMaxLength(50);

                entity.Property(e => e.ExistingGasLength).HasMaxLength(250);

                entity.Property(e => e.ExternalPumpRequired).HasMaxLength(50);

                entity.Property(e => e.FilterRequired).HasMaxLength(50);

                entity.Property(e => e.FloringBeRemoved).HasMaxLength(50);

                entity.Property(e => e.FlueClamps).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FlueExtensions).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FlushRequired).HasMaxLength(255);

                entity.Property(e => e.FurnitureBeMoved).HasMaxLength(50);

                entity.Property(e => e.GasRun).HasMaxLength(250);

                entity.Property(e => e.GasTigthnessTest).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HeatingSysTypeDescribe).HasMaxLength(255);

                entity.Property(e => e.HeatingSystemType).HasMaxLength(255);

                entity.Property(e => e.LimescaleReducer).HasMaxLength(50);

                entity.Property(e => e.LocateStopWater).HasMaxLength(50);

                entity.Property(e => e.LockShieldsReq).HasMaxLength(50);

                entity.Property(e => e.MeterWorkingPressure).HasMaxLength(100);

                entity.Property(e => e.MountedPipeworkPosition).HasMaxLength(50);

                entity.Property(e => e.NboilerDesc)
                    .HasColumnName("NBoilerDesc")
                    .HasMaxLength(250);

                entity.Property(e => e.NboilerLocation)
                    .HasColumnName("NBoilerLocation")
                    .HasMaxLength(100);

                entity.Property(e => e.Ncondensate)
                    .HasColumnName("NCondensate")
                    .HasMaxLength(100);

                entity.Property(e => e.NdegreeElbow45).HasColumnName("NDegreeElbow45");

                entity.Property(e => e.NdegreeElbow90).HasColumnName("NDegreeElbow90");

                entity.Property(e => e.NewSystemUnvented).HasMaxLength(50);

                entity.Property(e => e.NflueExtensions).HasColumnName("NFlueExtensions");

                entity.Property(e => e.NgasRun)
                    .HasColumnName("NGasRun")
                    .HasMaxLength(100);

                entity.Property(e => e.NoOfDays).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NoOfEngineers).HasMaxLength(50);

                entity.Property(e => e.NoOfLockShield).HasMaxLength(100);

                entity.Property(e => e.NoOfRadiators).HasMaxLength(50);

                entity.Property(e => e.NoOfShowers).HasMaxLength(50);

                entity.Property(e => e.NoOfTrv)
                    .HasColumnName("NoOfTRV")
                    .HasMaxLength(100);

                entity.Property(e => e.PboierSameLocation)
                    .HasColumnName("PBoierSameLocation")
                    .HasMaxLength(100);

                entity.Property(e => e.PboilerFlueType)
                    .HasColumnName("PBoilerFlueType")
                    .HasMaxLength(250);

                entity.Property(e => e.PboilerLocation)
                    .HasColumnName("PBoilerLocation")
                    .HasMaxLength(250);

                entity.Property(e => e.PboilerMake)
                    .HasColumnName("PBoilerMake")
                    .HasMaxLength(250);

                entity.Property(e => e.PcondenseTermination)
                    .HasColumnName("PCondenseTermination")
                    .HasMaxLength(100);

                entity.Property(e => e.ScaffoldingReq).HasMaxLength(50);

                entity.Property(e => e.StandOffKitReq).HasMaxLength(50);

                entity.Property(e => e.StandingInletPressure).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.SurveyorPrintName).HasMaxLength(150);

                entity.Property(e => e.SurveyorSignatureImageName).HasMaxLength(500);

                entity.Property(e => e.ThreePortValve).HasMaxLength(50);

                entity.Property(e => e.Trvreq)
                    .HasColumnName("TRVReq")
                    .HasMaxLength(50);

                entity.Property(e => e.TwoPortValvesRequired).HasMaxLength(100);

                entity.Property(e => e.TypeOfFlush).HasMaxLength(255);

                entity.Property(e => e.WaterPressure).HasMaxLength(255);

                entity.Property(e => e.WaterStopTested).HasMaxLength(250);

                entity.Property(e => e.WorkInletPressure).HasMaxLength(150);

                entity.Property(e => e.WorkingInletPressure).HasColumnType("decimal(30, 2)");

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.SiteSurveyNews)
                    .HasForeignKey(d => d.ClaimId)
                    .HasConstraintName("FK_SiteSurveyNew_Claim");
            });

            modelBuilder.Entity<SiteSurveyPhoto>(entity =>
            {
                entity.HasKey(e => e.ImgId);

                entity.HasIndex(e => e.Ssid)
                    .HasName("IX_SSId");

                entity.Property(e => e.ImgId).ValueGeneratedNever();

                entity.Property(e => e.ImageFor).HasMaxLength(200);

                entity.Property(e => e.ImageName).HasMaxLength(255);

                entity.Property(e => e.Ssid).HasColumnName("SSId");

                entity.HasOne(d => d.Ss)
                    .WithMany(p => p.SiteSurveyPhotos)
                    .HasForeignKey(d => d.Ssid)
                    .HasConstraintName("FK_SiteSurveyPhotos_SiteSurveyNew");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User");

                entity.HasIndex(e => e.Id)
                    .HasName("NonClusteredIndex-20191015-001450");

                entity.HasIndex(e => e.TeamId)
                    .HasName("IX_TeamID");

                entity.HasIndex(e => e.UserGuid)
                    .HasName("NonClusteredIndex-20191015-001503");

                entity.HasIndex(e => e.UserName)
                    .HasName("NonClusteredIndex-20190910-230501");

                entity.Property(e => e.BusinessPhone).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.FirstLoginDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(100);

                entity.Property(e => e.Gender).HasMaxLength(20);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastName).HasMaxLength(100);

                entity.Property(e => e.MobilePhone).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Salt).HasMaxLength(50);

                entity.Property(e => e.TeamId).HasColumnName("TeamID");

                entity.Property(e => e.TempPassword)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TempPasswordCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Token).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserGuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}